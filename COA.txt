4 : 2 Encoder : 

begin
-- Dataflow Code...
--E(1) <= I(2) or I(3);
--E(0) <= I(1) or I(3);
-----------------------
-- using case...
--Process(I)
--begin
--case I is
--when "0001" => E <= "00";
--when "0010" => E <= "01";
--when "0100" => E <= "10"; 
--when "1000" => E <= "11";
--when others => E <= "XX";
--end case;
--end Process;
------------------------
-- using if...
Process(I)
begin
if(I = "0001") then
E <= "00";
elsif(I = "0010") then
E <= "01";
elsif(I = "0100") then
E <= "10";
elsif(I = "1000") then
E <= "11";
else
E <= "XX";
end if;
end Process;

end Behavioral;
---------------------------
-- Using loop…
begin
process(I)
begin
for x in 0 to 3 loop
if (I(x) == ‘1’) then
E <= Conv_Std_logic_Vector(x,3);
end if;
end loop;
end process;

2 : 4 Decoder : 

begin
--Dataflow Code...
--D(0) <= '1' when I = "00" else '0';
--D(1) <= '1' when I = "01" else '0';
--D(2) <= '1' when I = "10" else '0';
--D(3) <= '1' when I = "11" else '0';
-------------------------------------
-- Behavioral using Case...
--Process(I)
--begin
--case I is
--when "00" => D <= "0001";
--when "01" => D <= "0010";
--when "10" => D <= "0100";
--when "11" => D <= "1000";
--when others => D <= "0000";
--end case;
--end Process;
------------------------------------
-- Using for loop...
--use IEEE.STD_LOGIC_ARITH.ALL;
--use IEEE.STD_LOGIC_UNSIGNED.ALL;
Process(I)
variable s : integer;
begin
s := Conv_integer(I);
for i in 0 to 3 loop
if(i=s) then
D(i) <= '1';
else
D(i) <= '0';
end if;
end loop;
end Process;

end Behavioral;


Half Adder : 

begin
-- Dataflow Model...
--S <= A xor B;
--C <= A and B;
-- Behavioral Model...
Process(A,B)
begin
if (A = '0') then
S <= B;
c <= A;
else
S <= not B;
c <= B;
end if;
end Process;

end Behavioral;


Full Adder : 

begin
Process(A,B,Cin)
begin
if (A = B) then
S <= Cin;
Cout <= A;
else
S <= not Cin;
Cout <= Cin;
end if;
end Process;

end Behavioral;


Half Subtractor : 

begin
Process(A,B)
begin 
if(A = '0') then
D <= B;
Bout <= B;
else
D <= not B;
Bout <= not A;
end if;
end Process;

end Behavioral;


Full Subtractor : 

begin
Process(A,B,Bin)
begin
if(A = B) then
D <= Bin;
Bout <= Bin;
else
D <= not Bin;
Bout <= B;
end if;
end Process;


end Behavioral;


Binary To Gray : 

begin
-- Dataflow Code...
--G(3) <= B(3);
--G(2) <= B(3) xor B(2);
--G(1) <= B(2) xor B(1);
--G(0) <= B(1) xor B(0);
-- Behavioral Code...
Process(B)
begin
G(3) <= B(3);
for i in 2 downto 0 loop
if(B(i+1)=B(i)) then
G(i) <= '0';
else 
G(i) <= '1';
end if;
end loop;
end Process;


end Behavioral;


Gray to Binary : 

begin
-- Dataflow Code...
--B(3) <= G(3);
--B(2) <= G(2) xor B(3);
--B(1) <= G(1) xor B(2);
--B(0) <= G(0) xor B(1);
-- Behavioral Code...
Process(G,B)
begin
B(3) <= G(3);
for i in 2 downto 0 loop
if(G(i) = B(i+1)) then
B(i) <= '0';
else
B(i) <= '1';
end if;
end loop;
end Process;

end Behavioral;


8 Bit Adder : 

--use IEEE.STD_LOGIC_ARITH.ALL;
--use IEEE.STD_LOGIC_UNSIGNED.ALL;
begin
Sum <= A+B;

end Behavioral;


4 Bit Comparator : 

begin
-- Behavioral Code...
Process(A,B)
begin
if(A>B) then
G <= '1';
E <= '0';
L <= '0';
elsif(A=B) then
G <= '0';
E <= '1';
L <= '0';
else
G <= '0';
E <= '0';
L <= '1';
end if;
end Process;

end Behavioral;

--Testbench Code…
A <= "0000"; B <= "0000";   wait for 100 ns;	
A <= "0000"; B <= "0001";   wait for 100 ns;	
A <= "0001"; B <= "0000";   wait for 100 ns;	


Full Adder using Half Adder : 

entity fa2 is
    Port ( A : in  STD_LOGIC;
           B : in  STD_LOGIC;
           Cin : in  STD_LOGIC;
           Sum : out  STD_LOGIC;
           Cout : out  STD_LOGIC);
end fa2;

architecture Behavioral of fa2 is
component ha2 is
    Port ( A : in  STD_LOGIC;
           B : in  STD_LOGIC;
           Sum : out  STD_LOGIC;
           Carry : out  STD_LOGIC);
end component;
component or2 is
    Port ( A : in  STD_LOGIC;
           B : in  STD_LOGIC;
           C : out  STD_LOGIC);
end component;
signal S1,C1,C2 : STD_LOGIC;

begin
m0 : ha2 port map(A,B,S1,C1);
m1 : ha2 port map(S1,Cin,Sum,C2);
m2 : or2 port map(C1,C2,Cout);

end Behavioral;


4 Bit parallel Adder : 

entity par_add is
    Port ( A : in  STD_LOGIC_VECTOR (3 downto 0);
           B : in  STD_LOGIC_VECTOR (3 downto 0);
           Cin : in  STD_LOGIC;
           Sum : out  STD_LOGIC_VECTOR (3 downto 0);
           Cout : out  STD_LOGIC);
end par_add;

architecture Behavioral of par_add is
component fa_pa is
    Port ( A : in  STD_LOGIC;
           B : in  STD_LOGIC;
           Cin : in  STD_LOGIC;
           Sum : out  STD_LOGIC;
           Cout : out  STD_LOGIC);
end component;
signal car : STD_LOGIC_VECTOR(4 downto 0);

begin
car(0) <= Cin;
m0 : fa_pa port map(A(0),B(0),car(0),Sum(0),car(1));
m1 : fa_pa port map(A(1),B(1),car(1),Sum(1),car(2));
m2 : fa_pa port map(A(2),B(2),car(2),Sum(2),car(3));
m3 : fa_pa port map(A(3),B(3),car(3),Sum(3),car(4));
Cout <= car(4);

end Behavioral;


4 bit Parallel Adder (without structure) : 

entity Parallel_Adder4Bit is
    Port ( A : in  STD_LOGIC_VECTOR (3 downto 0);
           B : in  STD_LOGIC_VECTOR (3 downto 0);
           Cin : in  STD_LOGIC;
           Sum : out  STD_LOGIC_VECTOR (3 downto 0);
           Cout : out  STD_LOGIC);
end Parallel_Adder4Bit;

architecture Behavioral of Parallel_Adder4Bit is

begin
Process (A, B, Cin)
Variable u: std_logic_vector(4 downto 0);
begin
u(0) := Cin;
u(0) := '0';
for i in 0 to 3 loop
Sum(i) <= A(i) xor B(i) xor u(i);
u(i+1) := (A(i) and B(i)) or (B(i) and u(i)) or (u(i) and A(i));
end loop;
Cout <= u(4);
end Process;
end Behavioral;


4 Bit parallel Subtractor : 

entity Parallel_Substractor4Bit is
    Port ( A : in  STD_LOGIC_VECTOR (3 downto 0);
           B : in  STD_LOGIC_VECTOR (3 downto 0);
           Bin : in  STD_LOGIC;
           Diff : out  STD_LOGIC_VECTOR (3 downto 0);
           Bout : out  STD_LOGIC);
end Parallel_Substractor4Bit;

architecture Behavioral of Parallel_Substractor4Bit is

begin
Process (A, B, Bin)
Variable u: std_logic_vector(4 downto 0);
begin
u(0) := Bin;
u(0) := '0';
for i in 0 to 3 loop
Diff(i) <= A(i) xor B(i) xor u(i);
u(i+1) := (not A(i) and B(i)) or (B(i) and u(i)) or (u(i) and not A(i));
end loop;
Bout <= u(4);
end Process;
end Behavioral;

